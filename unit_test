public void createFolder(String bucketName, String folderName) throws FileNotFoundException {

        try {
            Storage storage = getStorage();
            if (isValidFolderName(folderName)) {
                throw new IllegalArgumentException("Invalid file name.");
            }

            if (folderExists(storage, bucketName, folderName)) {
                throw new IllegalStateException("folder already exists");
            }

            BlobId blobId = BlobId.of(bucketName, folderName.endsWith("/") ? folderName : folderName + "/");
            BlobInfo blobInfo = BlobInfo.newBuilder(blobId).build();

            storage.create(blobInfo);

        } catch (IOException e) {
            throw new FileNotFoundException("GCP credentials not found");
        }
    }
*******************************************************************************************************************

@Service
public class MainServiceDetails {

public List<String> getFileList(Storage storage) {
    List<String> list = new ArrayList<>();
    Page<Blob> blobs = storage.list("bucketname"); // bucket name

    for (Blob blob : blobs.iterateAll()) {
        list.add(blob.getName());
        System.out.println(blob.getName());
    }
    return list;
}
  }

******************************************************************************************************************

@ExtendWith(MockitoExtension.class)
public class ControllerTest {

    @Mock
    private MainServiceDetails mainService;
    @InjectMocks
    private Controller controller;
    @Captor
    private ArgumentCaptor<Storage> storageCaptor;

    @Test
    public void test() {
         List<String> expected = Arrays.asList("sup1", "sup2", "sup3"); 

         Mockito.when(mainService.getFileList(storageCaptor.capture()))
              .thenReturn(expected);

         List<String> actual = controller.getBucketList();
         
         Storage value = storageCaptor.getValue();
         //verify call to mainService is made with Storage.
         Mockito.verify(mainService, times(1)).getFileList(value);
         //Add some assertions to check if the storage object has the values you expect
         //assertThat(value.getProjectId()).isEqualTo("projectId");
    }
}
